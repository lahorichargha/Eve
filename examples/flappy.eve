Add a flappy eve and a world for it to flap in
  [#session-connect]
  freeze
    [#player #self name: "eve" x: 25 y: 50 velocity: 0 acceleration: -0.024] // We're going to normalize our coordinates to [0...100]
    [@world screen: "menu" frame: 0 distance: 0 best: 0]
    [#obstacle gap: 35]

Draw the game world!
  [@world distance]
  maintain
    [#svg @game-window viewBox: "0 0 100 100", width: "640px" height: "640px" children:
      [#rect x: 0 y: 0 width: 100 height: 100 fill: "rgb(112, 197, 206)" sort: 0]
      [#rect x: 0 y: 90 width: 100 height: 10 fill: "rgb(222, 216, 149)" sort: 1]]


## This handles the game's miscellaneous screens. It's currently pretty simple, but you could expand it to include changes to other purpose-specific screens.

Draw the main menu
  [@world screen: "menu"]
  svg = [@game-window]
  maintain
    svg.children += [#text x: 50 y: 45 text-anchor: "middle" font-size: 8 text: "Click the screen to begin!" sort: 10]

Keep score
  world = [@world distance]
  maintain
    world.score := floor(distance / 2)

Draw the game over final score
  [@world screen: "game over" score best]
  svg = [@game-window]
  maintain
    svg += [children:
      [#text x: 50 y: 30 text-anchor: "middle" font-size: 8 text: "Game Over :(" sort: 10]
      [#text x: 50 y: 55 text-anchor: "middle" font-size: 6 text: "Score {{score}}" sort: 10]
      [#text x: 50 y: 65 text-anchor: "middle" font-size: 6 text: "Best {{best}}" sort: 10]
      [#text x: 50 y: 85 text-anchor: "middle" font-size: 4 text: "Click to play again!" sort: 10]]

Start the game
  [#click #direct-target]
  world = if world = [@world screen: "menu"] then world
          else [@world screen: "game over"]
  neue = if world = [@world score best] score > best then score
         else if world = [@world best] then best
  player = [#player]
  freeze
    world := [screen: "game" distance: 0 best: neue]
    player := [x: 25 y: 50 velocity: 0]


## Run the actual game
Every 2 distance a wild obstacle appears
  [@world distance]
  obstacle = [#obstacle]
  maintain
    obstacle := [x: 110 - (60 * mod(distance, 2))]

Readjust the height of the gap every time the obstacle resets
  [@world screen: "game"]
  obstacle = [#obstacle x > 100]
  height = random(obstacle) * 45 + 10
  freeze
    obstacle.height := height

Draw the player
  [#player x y]
  svg = [@game-window]
  maintain
    svg.children += [#circle cx: x cy: y r: 5 fill: "#0B79CE" sort: 2]

Draw the obstacles
  [#obstacle x height gap]
  bottom-height = height + gap
  svg = [@game-window]
  maintain
    [#div sort: 7 text: "obstacle x: {{x}} height: {{height}} gap: {{gap}}"]
    svg.children += [#rect x y: 0 width: 10 height, fill: "rgb(115, 191, 46)" sort: 1]
    svg.children += [#rect x y: bottom-height width: 10 height: 100 - bottom-height, fill: "rgb(115, 191, 46)" sort: 1]

Flap the player
  [#click #direct-target]
  [@world screen: "game"]
  player = [#player #self]
  maintain
    player.acceleration += 1.4

As time moves gently forward, winter turns to spring
  [#time frames]
  world = [@world screen: "game" frame != frames]
  player = [#player y velocity acceleration]
  ∂v = sum(acceleration given acceleration) // this will do bad things if there are ever multiple impulses of identical magnitude
  freeze
    world.frame := frames
    world.distance := world.distance + 1 / 60
    player := [y: y - velocity, velocity: velocity + ∂v]

Lose the game if the player hits the ground
  world = [@world screen: "game"]
  [#player y > 85] // ground height + player radius
  freeze
    world.screen := "game over"

Lose the game if the player hits an obstacle
  world = [@world screen: "game"]
  [#player x y]
  [#obstacle x: obstacle-x height gap]
  ∂x = abs(obstacle-x + 5 - x) - 10 // distance between the edges of player and obstacle (offset of 1/2 obstacle width because origin is on the left)
  ∂x < 0
  collision = if y - 5 <= height then true
              else if y + 5 >= gap + height then true
  freeze
    world.screen := "game over"
